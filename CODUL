// Presupunem ca toate valorile sunt distincte.
struct Node {
  Node* left, right;
  int val;
};

Node* insert(Node* root, int val) {
  if (root == nullptr) {
    Node* new_node = new Node;
    new_node->left = new_node->right = nullptr;
    new_node->val = val;
    return new_node;
  }
  
  if (val < root->val) {
    root->left = insert(root->left, val);
  } else {
    root->right = insert(root->right, val);
  }
}

// Intoarce nodul cu valoarea cautata.
// Daca valoarea nu exista in arbore, intoarce nullptr.
Node* search(Node* root, int val) {
	if(root == nullptr){
  	return nullptr;
  }
  if(root->val == val){
  	return root;
  }
  else
  if(val<root->val){
  	return search(root->left, val);
  }
  else
  return search(root->right, val);
}

Node* search(Node* root, int val) {
//	if (root == nullptr) return nullptr;
//  if (root->val == val) return root;
  if (root == nullptr || root->val == val) return root;
  
  if (val < root->val) {
  	return search(root->left, val);
  } else {
    return search(root->right, val);
  }
}




Node* search(Node* root, int val){

	while(root != nullptr)
  { 
  	if(val == root->val || root == nullptr) return root;
  	if(val < root->val) root = root->left;
    else root = root->right;
  }

}

Node* search(Node* root, int val) {
	while (root != nullptr) {
  	if (val == root->val) return root;
  	if (val < root->val) root = root->left;
    else root = root->right;
  }
  return nullptr;
}

Node* search(Node* root, int val) {
  while (root != nullptr && root->val != val) {
  	if (val < root->val) root = root->left;
    else root = root->right;
  }
  return root;
}

Node* remove(Node*root, int val) {
  if (root == nullptr) return nullptr;
  
  if (val < root->val) {
    root->left = remove(root->left, val);
    return root;
  }
  
  if (val > root->val) {
    root->right = remove(root->right, val);
    return root;
  }
  
  if (root->left == nullptr) {
    Node* new_root = root->right;
    delete root;
    return new_root;
  }
  
  if (root->right == nullptr) {
    Node* new_root = root->left;
    delete root;
    return new_root;
  }
  
  Node* succesor = root->right;
  while (succesor->left != nullptr) succesor = succesor->left;
  
  swap(root->val, succesor->val);
  root->right = remove(root->right, val);
  return root;
}

